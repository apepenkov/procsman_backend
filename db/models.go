// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProcessEventType string

const (
	ProcessEventTypeUNKNOWN         ProcessEventType = "UNKNOWN"
	ProcessEventTypeSTART           ProcessEventType = "START"
	ProcessEventTypeSTOP            ProcessEventType = "STOP"
	ProcessEventTypeCRASH           ProcessEventType = "CRASH"
	ProcessEventTypeFULLSTOP        ProcessEventType = "FULL_STOP"
	ProcessEventTypeFULLCRASH       ProcessEventType = "FULL_CRASH"
	ProcessEventTypeMANUALLYSTOPPED ProcessEventType = "MANUALLY_STOPPED"
	ProcessEventTypeRESTART         ProcessEventType = "RESTART"
)

func (e *ProcessEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProcessEventType(s)
	case string:
		*e = ProcessEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProcessEventType: %T", src)
	}
	return nil
}

type NullProcessEventType struct {
	ProcessEventType ProcessEventType `json:"process_event_type"`
	Valid            bool             `json:"valid"` // Valid is true if ProcessEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProcessEventType) Scan(value interface{}) error {
	if value == nil {
		ns.ProcessEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProcessEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProcessEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProcessEventType), nil
}

type ProcessStatus string

const (
	ProcessStatusRUNNING            ProcessStatus = "RUNNING"
	ProcessStatusSTOPPED            ProcessStatus = "STOPPED"
	ProcessStatusCRASHED            ProcessStatus = "CRASHED"
	ProcessStatusSTARTING           ProcessStatus = "STARTING"
	ProcessStatusSTOPPING           ProcessStatus = "STOPPING"
	ProcessStatusSTOPPEDWILLRESTART ProcessStatus = "STOPPED_WILL_RESTART"
	ProcessStatusCRASHEDWILLRESTART ProcessStatus = "CRASHED_WILL_RESTART"
	ProcessStatusUNKNOWN            ProcessStatus = "UNKNOWN"
)

func (e *ProcessStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProcessStatus(s)
	case string:
		*e = ProcessStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProcessStatus: %T", src)
	}
	return nil
}

type NullProcessStatus struct {
	ProcessStatus ProcessStatus `json:"process_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProcessStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProcessStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProcessStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProcessStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProcessStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProcessStatus), nil
}

type Log struct {
	ID        int32            `json:"id"`
	ProcessID pgtype.Int4      `json:"process_id"`
	StartTime pgtype.Timestamp `json:"start_time"`
	EndTime   pgtype.Timestamp `json:"end_time"`
	Path      string           `json:"path"`
}

type Process struct {
	ID               int32             `json:"id"`
	Name             string            `json:"name"`
	ProcessGroupID   pgtype.Int4       `json:"process_group_id"`
	Color            pgtype.Text       `json:"color"`
	Enabled          bool              `json:"enabled"`
	ExecutablePath   string            `json:"executable_path"`
	Arguments        string            `json:"arguments"`
	WorkingDirectory string            `json:"working_directory"`
	Environment      map[string]string `json:"environment"`
	Status           ProcessStatus     `json:"status"`
	Configuration    Configuration     `json:"configuration"`
}

type ProcessEvent struct {
	ID             int32            `json:"id"`
	ProcessID      pgtype.Int4      `json:"process_id"`
	Event          ProcessEventType `json:"event"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	AdditionalInfo []byte           `json:"additional_info"`
}

type ProcessGroup struct {
	ID                   int32         `json:"id"`
	Name                 string        `json:"name"`
	Color                pgtype.Text   `json:"color"`
	ScriptsConfiguration Configuration `json:"scripts_configuration"`
}

type ProcessStat struct {
	ID                 int32            `json:"id"`
	ProcessID          pgtype.Int4      `json:"process_id"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	CpuUsage           int64            `json:"cpu_usage"`
	CpuUsagePercentage float64          `json:"cpu_usage_percentage"`
	MemoryUsage        int64            `json:"memory_usage"`
}
